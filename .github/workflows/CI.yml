name: Build and Test

on:
  push:
    branches:
      - development

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build
        run: mvn clean install
        
      - name: Test
        run: mvn test

      - name: Update Version
        id: update_version
        run: |
          # Get the current version from the pom.xml file
          current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current Version: $current_version"

          # Increment the version number
          IFS='.' read -ra version_parts <<< "$current_version"
          patch_version=$((version_parts[2] + 1))
          new_version="${version_parts[0]}.${version_parts[1]}.$patch_version"
          echo "New Version: $new_version"

          # Update the version in the pom.xml file
          mvn versions:set -DnewVersion=$new_version -DgenerateBackupPoms=false

          # Store the new version in an environment file
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
      
                           
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/my-app:${{ env.NEW_VERSION }}
      
      - name: Commit and Push Changes 
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -a -m "Update version in pom.xml"
          git push
          
      - name: Create Pull Request
        id: cpr
        uses: repo-sync/pull-request@v2
        with:
          destination_branch: "master"
          pr_title: "CI updates"
          pr_body: "Updates from CI"
          github_token: ${{ secrets.GITHUB_TOKEN }}
               
      - name: Check outputs
        if: ${{ steps.cpr.outputs.pull-request-number }}
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"
